name: Secure Release Pipeline - Progressive Security Evolution

on:
  push:
    branches:
      - main
      - secure-release-test
  pull_request:
    types: [closed]
    branches:
      - main

# Week 3: Restrict permissions to least privilege
# üëá Uncomment to apply least privilege permissions (Week 3)
permissions:
  contents: read      # Can read repository
  packages: write     # Can push Docker images
  id-token: write     # Can authenticate with cloud
#   # Everything else: denied by default

jobs:
  # Week 1: Basic build and test
  build-and-test:
    runs-on: ubuntu-latest
    # Week 1: Overly broad permissions (SECURITY ISSUE!)
    # permissions: write-all  # üö® Too broad - fix in Week 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r src/requirements.txt

      # Week 2: Add dependency scanning
      # üëá Uncomment this step for Week 2: Basic Security Scanning
      - name: Install Security Tools
        run: |
          source venv/bin/activate
          pip install pip-audit

      - name: Audit Dependencies for Vulnerabilities
        run: |
          source venv/bin/activate
          pip-audit --strict
          # This will fail if vulnerabilities are found

      - name: Run tests
        run: |
          source venv/bin/activate
          pytest tests/ || echo "Tests completed"

  # Week 4: Enhanced build with SBOM and vulnerability scanning
  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Week 4: Generate Software Bill of Materials (SBOM)
      # üëá Uncomment for Week 4: SBOM Generation
      - name: Generate Software Bill of Materials
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft . -o cyclonedx-json > sbom.json
          echo "üìã SBOM generated with $(jq '.components | length' sbom.json) components"

      - name: Upload SBOM as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: software-bill-of-materials
          path: sbom.json

      - name: Get version from Git commit
        id: get_version
        run: |
          echo "VERSION=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "Building version: ${GITHUB_SHA::7}"

      # Week 3: Replace hardcoded credentials with GitHub Secrets
      # Week 1: SECURITY ISSUE - Hardcoded credentials!
      # üö® Uncomment ONLY ONE of the following login methods:

      # BAD (Week 1): Hardcoded credentials
      - name: Log in to Registry (INSECURE - Week 1)
        run: |
          # üö® SECURITY ISSUE: Hardcoded password!
          echo "password123" | docker login ghcr.io -u admin --password-stdin
          echo "‚ö†Ô∏è  Using hardcoded credentials - SECURITY RISK!"

      # GOOD (Week 3+): GitHub Secrets
      # üëá Uncomment for Week 3: Secret Management
      # - name: Log in to GitHub Container Registry (SECURE - Week 3+)
      #   run: |
      #     echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
      #     echo "‚úÖ Using secure GitHub token authentication"

      - name: Build and tag Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/kodekloud-records:${{ env.VERSION }} .
          docker tag ghcr.io/${{ github.repository }}/kodekloud-records:${{ env.VERSION }} ghcr.io/${{ github.repository }}/kodekloud-records:latest
          echo "üê≥ Docker image built: kodekloud-records:${{ env.VERSION }}"

      # Week 4: Scan SBOM for vulnerabilities
      # üëá Uncomment for Week 4: Vulnerability Scanning
      # - name: Scan SBOM for Vulnerabilities
      #   run: |
      #     curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
      #     grype sbom.json --fail-on high
      #     echo "üîç Vulnerability scan completed"

      # Week 4: Container vulnerability scanning
      # üëá Uncomment for Week 4: Container Security Scanning
      # - name: Scan Docker Image for Vulnerabilities
      #   run: |
      #     grype ghcr.io/${{ github.repository }}/kodekloud-records:${{ env.VERSION }} --fail-on high
      #     echo "üîç Container vulnerability scan completed"

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository }}/kodekloud-records:${{ env.VERSION }}
          docker push ghcr.io/${{ github.repository }}/kodekloud-records:latest
          echo "üì¶ Images pushed to registry"

  # Week 5: Staging deployment with testing
  deploy-staging:
    needs: docker-build
    runs-on: ubuntu-latest
    # Week 5: Add environment protection
    # üëá Uncomment for Week 5: Environment Gating
    # environment: staging

    steps:
      - name: Deploy to Staging Environment
        run: |
          echo "üöÄ Deploying kodekloud-records:${{ env.VERSION }} to Staging"
          echo "Staging URL: http://staging.kodekloud-records.com"
          # Replace with actual deployment command
          sleep 5  # Simulate deployment time

      - name: Run Integration Tests in Staging
        run: |
          echo "üß™ Running integration tests in staging..."
          # Simulate health check
          echo "Health check: /health endpoint"
          echo "API check: /api/records endpoint"
          echo "Database connectivity: ‚úÖ"
          echo "‚úÖ All staging tests passed"

      # Week 6: Enhanced health checks
      # üëá Uncomment for Week 6: Comprehensive Health Checks
      # - name: Comprehensive Health Check
      #   run: |
      #     echo "üè• Running comprehensive health checks..."
      #     
      #     # API health check
      #     curl -f http://staging.kodekloud-records.com/health || exit 1
      #     
      #     # Database health check
      #     curl -f http://staging.kodekloud-records.com/api/health/db || exit 1
      #     
      #     # Performance check
      #     response_time=$(curl -o /dev/null -s -w '%{time_total}' http://staging.kodekloud-records.com/api/records)
      #     if (( $(echo "$response_time > 2.0" | bc -l) )); then
      #       echo "‚ùå Response time too slow: ${response_time}s"
      #       exit 1
      #     fi
      #     
      #     echo "‚úÖ All health checks passed (${response_time}s response time)"

  # Week 5: Production deployment with approval gates
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    # Week 5: Require manual approval for production
    # üëá Uncomment for Week 5: Production Approval Gates
    # environment: production

    steps:
      - name: Deploy to Production Environment
        run: |
          echo "üöÄ Deploying kodekloud-records:${{ env.VERSION }} to Production"
          echo "Production URL: https://kodekloud-records.com"
          # Replace with actual deployment command
          sleep 10  # Simulate production deployment time

      # Week 6: Deployment with automatic rollback
      # üëá Uncomment for Week 6: Automated Rollback
      # - name: Deploy with Rollback Safety Net
      #   run: |
      #     echo "üöÄ Starting production deployment with rollback protection..."
      #     
      #     # Store current version for rollback
      #     PREVIOUS_VERSION=$(docker images --format "{{.Tag}}" ghcr.io/${{ github.repository }}/kodekloud-records | head -2 | tail -1)
      #     echo "Previous version for rollback: $PREVIOUS_VERSION"
      #     
      #     # Deploy new version
      #     echo "Deploying new version: ${{ env.VERSION }}"
      #     # docker run -d --name kodekloud-records-new ghcr.io/${{ github.repository }}/kodekloud-records:${{ env.VERSION }}
      #     
      #     # Wait for startup
      #     echo "Waiting for application startup..."
      #     sleep 30
      #     
      #     # Health check with automatic rollback
      #     if ! curl -f https://kodekloud-records.com/health; then
      #       echo "‚ùå Health check failed, initiating automatic rollback..."
      #       # docker stop kodekloud-records-new
      #       # docker run -d --name kodekloud-records ghcr.io/${{ github.repository }}/kodekloud-records:$PREVIOUS_VERSION
      #       echo "üîÑ Rollback completed to version: $PREVIOUS_VERSION"
      #       exit 1
      #     fi
      #     
      #     echo "‚úÖ Deployment successful!"

      - name: Post-deployment Health Check
        run: |
          echo "üè• Running production health checks..."
          echo "API Health: ‚úÖ"
          echo "Database: ‚úÖ"
          echo "External Services: ‚úÖ"
          echo "‚úÖ Production deployment verified"

      # Week 6: Rollback on failure
      # üëá Uncomment for Week 6: Failure Rollback
      # - name: Rollback on Deployment Failure
      #   if: failure()
      #   run: |
      #     echo "‚ùå Deployment failed, initiating rollback..."
      #     echo "üîÑ Rolling back to previous known good version..."
      #     # docker pull ghcr.io/${{ github.repository }}/kodekloud-records:latest-stable
      #     # kubectl rollout undo deployment/kodekloud-records
      #     echo "‚úÖ Rollback completed"
      #     
      #     # Notify team
      #     echo "üìß Sending deployment failure notification..."

  # Week 7: Security monitoring and reporting
  security-monitoring:
    needs: [build-and-test, docker-build]
    runs-on: ubuntu-latest
    if: always()  # Run even if other jobs fail

    steps:
      # üëá Uncomment for Week 7: Security Monitoring
      # - name: Security Monitoring Setup
      #   run: |
      #     # Set up monitoring for security events
      #     echo "üîç Configuring security monitoring..."
      #     
      #     # Collect security metrics
      #     cat > security_metrics.json << EOF
      #     {
      #       "pipeline_id": "${{ github.run_id }}",
      #       "repository": "${{ github.repository }}",
      #       "commit": "${{ github.sha }}",
      #       "branch": "${{ github.ref_name }}",
      #       "actor": "${{ github.actor }}",
      #       "security_status": {
      #         "vulnerability_scan": "passed",
      #         "sbom_generated": "true", 
      #         "container_scan": "passed",
      #         "secret_scan": "passed"
      #       },
      #       "compliance": {
      #         "security_gates_passed": true,
      #         "approval_required": false
      #       },
      #       "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
      #     }
      #     EOF
      #     
      #     # Send to monitoring system
      #     if [ -n "${{ secrets.MONITORING_WEBHOOK }}" ]; then
      #       echo "üì° Sending security metrics to monitoring system..."
      #       curl -X POST "${{ secrets.MONITORING_WEBHOOK }}" \
      #            -H "Content-Type: application/json" \
      #            -d @security_metrics.json \
      #            --silent --fail-with-body || echo "‚ö†Ô∏è Webhook delivery failed"
      #       echo "‚úÖ Security monitoring alert sent successfully"
      #     else
      #       echo "‚ö†Ô∏è MONITORING_WEBHOOK not configured - skipping external alert"
      #       echo "üìä Security metrics collected: $(cat security_metrics.json)"
      #     fi
      #     
      # - name: Generate Security Dashboard
      #   run: |
      #     echo "üìà Security Dashboard Summary:"
      #     echo "================================="
      #     echo "üõ°Ô∏è  Pipeline Security Score: 95/100"
      #     echo "üîç Vulnerabilities: 0 critical, 0 high"
      #     echo "üìã SBOM: ‚úÖ Generated and scanned"
      #     echo "üîê Secrets: ‚úÖ All managed securely"
      #     echo "üê≥ Container: ‚úÖ Scanned and clean"
      #     echo "üìä Compliance: ‚úÖ SOC 2 compliant"
      #     echo "================================="

      - name: Security Status Summary
        run: |
          echo "üîí Security Pipeline Status Summary"
          echo "=================================="
          echo "Pipeline: Secure Release Pipeline"
          echo "Version: ${{ env.VERSION }}"
          echo "Security Level: Week 1 (Basic)"
          echo ""
          echo "üéØ To improve security, uncomment features week by week:"
          echo "  Week 2: Dependency scanning"
          echo "  Week 3: Secret management + least privilege"
          echo "  Week 4: SBOM generation + vulnerability scanning"
          echo "  Week 5: Environment gating + approval workflows"
          echo "  Week 6: Automated rollback + health checks"
          echo "  Week 7: Security monitoring + reporting"
          echo ""
          echo "üìö See lesson: Building a Secure Release Pipeline"
