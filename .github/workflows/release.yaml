name: Secure Release Pipeline - Step-by-Step Security

on:
  push:
    branches:
      - main
      - secure-release-test
  pull_request:
    types: [closed]
    branches:
      - main

# Step 4: Uncomment to apply least privilege permissions
# 👇 Uncomment this section in Step 4: Secure Authentication
# permissions:
#   contents: read      # Can read repository
#   packages: write     # Can push Docker images
#   id-token: write     # Can authenticate with cloud

jobs:
  # Step 1: Basic build and test (ALWAYS ENABLED)
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r src/requirements.txt

      # Step 2: Uncomment to add dependency vulnerability scanning
      # 👇 Uncomment this section in Step 2: Dependency Scanning
      - name: Install Security Tools
        run: |
          source venv/bin/activate
          pip install pip-audit

      - name: Scan for Vulnerable Dependencies
        run: |
          source venv/bin/activate
          pip-audit --strict
          echo "✅ No critical vulnerabilities found"

      - name: Run Basic Tests
        run: |
          source venv/bin/activate
          pytest tests/ || echo "Tests completed"

  # Step 3: Container build with SBOM
  build-container:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 3: Uncomment to add SBOM generation
      # 👇 Uncomment this section in Step 3: Software Bill of Materials
      - name: Generate Software Bill of Materials (SBOM)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft . -o cyclonedx-json > sbom.json
          echo "📋 SBOM generated with $(jq '.components | length' sbom.json) components"

      - name: Upload SBOM as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: software-bill-of-materials
          path: sbom.json

      - name: Scan SBOM for Vulnerabilities
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype sbom.json --fail-on high
          echo "🔍 SBOM vulnerability scan completed"

      - name: Get version from Git commit
        id: get_version
        run: |
          echo "VERSION=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "Building version: ${GITHUB_SHA::7}"

      # Step 4: Choose your authentication method
      # 🚨 SECURITY ISSUE: Uncomment ONLY ONE of the following login methods:

      # BAD: Hardcoded credentials (Step 1 - shows the problem)
      # - name: Log in to Registry (INSECURE - Step 1)
      #   run: |
      #     # 🚨 SECURITY ISSUE: Hardcoded password!
      #     echo "password123" | docker login ghcr.io -u admin --password-stdin
      #     echo "⚠️  Using hardcoded credentials - SECURITY RISK!"

      # GOOD: Uncomment for Step 4: Secure Authentication
      👇 Uncomment this section in Step 4 and comment out the above
      - name: Log in to GitHub Container Registry (SECURE - Step 4)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
          echo "✅ Using secure GitHub token authentication"

      - name: Build and tag Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/kodekloud-records:${{ env.VERSION }} .
          docker tag ghcr.io/${{ github.repository }}/kodekloud-records:${{ env.VERSION }} ghcr.io/${{ github.repository }}/kodekloud-records:latest
          echo "🐳 Docker image built: kodekloud-records:${{ env.VERSION }}"

      # Step 5: Uncomment to add container vulnerability scanning
      # 👇 Uncomment this section in Step 5: Container Security
      - name: Scan Container for Vulnerabilities
        run: |
          grype ghcr.io/${{ github.repository }}/kodekloud-records:${{ env.VERSION }} --fail-on high
          echo "🔍 Container vulnerability scan completed"

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository }}/kodekloud-records:${{ env.VERSION }}
          docker push ghcr.io/${{ github.repository }}/kodekloud-records:latest
          echo "📦 Images pushed to registry"

  # Step 6: Deploy to staging
  deploy-staging:
    needs: build-container
    runs-on: ubuntu-latest
    # Step 6: Uncomment to add environment protection
    # 👇 Uncomment this line in Step 6: Environment-based Deployments
    environment: staging

    steps:
      - name: Deploy to Staging
        run: |
          echo "🚀 Deploying to Staging Environment"
          echo "Version: ${{ env.VERSION }}"
          echo "URL: http://staging.kodekloud-records.com"
          # In real world: kubectl apply -f k8s/staging/ or helm upgrade
          sleep 3

      - name: Basic Health Check
        run: |
          echo "🏥 Running health checks..."
          echo "✅ Application is responding"
          echo "✅ Database connection OK"
          # In real world: curl -f $STAGING_URL/health

  # Step 6: Deploy to production
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    # Step 6: Uncomment to add environment protection
    # 👇 Uncomment this line in Step 6: Environment-based Deployments
    environment: production

    steps:
      - name: Deploy to Production
        run: |
          echo "🚀 Deploying to Production Environment"
          echo "Version: ${{ env.VERSION }}"
          echo "URL: https://kodekloud-records.com"
          # In real world: kubectl apply -f k8s/production/ or helm upgrade
          sleep 5

      - name: Verify Production Deployment
        run: |
          echo "✅ Production deployment completed"
          echo "✅ Application is healthy"
          # In real world: curl -f $PRODUCTION_URL/health

  # Security summary (always runs)
  security-summary:
    needs: [build-and-test, build-container]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Security Pipeline Progress Report
        run: |
          echo "🔒 Security Pipeline Learning Progress"
          echo "====================================="
          echo "✅ Step 1: Basic build and test - COMPLETE"
          echo ""
          echo "🎯 Next Steps to Secure Your Pipeline:"
          echo "  Step 2: Uncomment dependency vulnerability scanning"
          echo "  Step 3: Uncomment SBOM generation and scanning"
          echo "  Step 4: Replace hardcoded credentials with GitHub secrets"
          echo "  Step 5: Uncomment container vulnerability scanning"
          echo "  Step 6: Uncomment environment-based deployments"
          echo ""
          echo "🔧 Instructions:"
          echo "  • Find the 👇 Uncomment sections in the workflow"
          echo "  • Remove the # at the beginning of each line"
          echo "  • Test one step at a time"
          echo "  • Commit and push to see the changes"
          echo ""
          echo "📚 Learn: Building a Secure Release Pipeline"
